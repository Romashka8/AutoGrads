import abc


# ----------------------------------------------------------------------------------------------------------------------------

class Neuron(abc.ABC):
	
	"""
	Класс Neuron реализует базовый кирпич слоя - нейрон.
	
	Хранит в себе:
		-weights: веса, которые меняются в ходе обучения
		-activation: функцию активации для каждого нейрона
		-der: производную функции активации
		-output: предсказание нейрона

	Реализует:
		-конструктор: для инициализации параметров выше
		-activate: метод делает предсказание и пропускает через функцию активации, тем самым обновляя выход нейрона
	"""

	@abc.abstractmethod
	def __init__(self):
		pass

	@abc.abstractmethod
	def activate(self):
		pass

# ----------------------------------------------------------------------------------------------------------------------------

class Layer(abc.ABC):
	
	"""
	Класс Layer собирает нейроны в слой нейросети.

	Хранит в себе:
		-neurons: список всех нейрон слоя
		-output: вывод всего слоя
		-error: ошибка слоя на этапе обратного прохода
		-delta: масштабирование ошибки, полученной с предыдущего слоя

	Реализует:
		-конструктор: в него принимает колличество нейронов в слое, размер входа и функцию активации для каждого нейрона слоя
		-forward: реализацию прямого подхода по всем нейронам слоя и обновление output
	"""
	
	@abc.abstractmethod
	def __init__(self):
		pass

	@abc.abstractmethod
	def forward(self):
		pass

# ----------------------------------------------------------------------------------------------------------------------------

class Network(abc.ABC):

	"""
	Класс Network состоит из слоев, тобишь собирает все слои в нейросеть.

	Хранит в себе:
		-layers: все слои нейросети

	Реализует:
		-конструктор: принимает в себя список слоев
		-forward: метод прямого распространения ошибки по всей сети. Тобишь вызов forward у всех слоев сети.
		-backward: метод обратного распространения ошибки. Обновляет error и delta на каждом слое, начиная с выходного. Также меняет веса каждого из нейронов.
		-train: упрощает тренировку всей сети.
	"""

	@abc.abstractmethod
	def __init__(self):
		pass

	@abc.abstractmethod
	def forward(self):
		pass

	@abc.abstractmethod
	def backward(self):
		pass

	@abc.abstractmethod
	def train(self):
		pass
